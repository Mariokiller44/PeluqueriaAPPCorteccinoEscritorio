/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DateTimePicker;
import com.github.lgooddatepicker.components.TimePicker;
import controlador.ConexionBD;
import java.awt.GridLayout;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.LookAndFeel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.Date;
import java.time.LocalDate;
import javax.swing.JPanel;
import com.toedter.calendar.*;
import controlador.ConsultasPersonal;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.JTable;
import static javax.swing.UIManager.put;
import modelo.Cita;
import modelo.Horario;
import modelo.Personal;
import modelo.Servicio;
import modelo.Usuario;

/**
 *
 * @author mescr
 */
public class GestionCitasVentana extends javax.swing.JFrame {

    private ConexionBD conexion;
    private Connection con;
    private String servicio, nombre, descripcion;
    private String fecha;
    private int id;
    private String[] columnas = {"Fecha", "Hora", "Servicio", "Precio", "Cliente"};
    private String[] columnasAdmin = {"Fecha", "Hora", "Servicio", "Precio", "Cliente", "Personal"};
    private String hora;
    private JComboBox comboBox;
    private ArrayList<String> listaDatos = new ArrayList<>();
    private String datoServ;
    private String servicioEscogido;
    private String serviciocompleto;
    private String descripcionServicio;
    private String precioServicio;
    private int idServ;
    private int idHorario;
    private String servicioCitado;
    private String nuevoServicioCitado;
    private JComboBox<String> comboBoxDatos;
    private static ArrayList<Horario> horarios = new ArrayList<>();
    private static ArrayList<Usuario> clientes = new ArrayList<>();
    private JComboBox<String> comboBoxEmpleado;
    private ConsultasPersonal consultas = new ConsultasPersonal();
    private VentanaPrincipal vc;
    private String tipoUsu;
    private Date jDateChooser1;
    private Object jSpinner1;
    private Object jSpinner2;
    private Object txtDescripcion;
    private Object txtPrecio;
    private JComboBox<String> comboBoxHorarios;
    private String[] opcionesHorario;
    private int idS;

    public int getIdS() {
        return idS;
    }

    public void setIdS(int idS) {
        this.idS = idS;
    }

    public JTable getTabla() {
        return tabla;
    }

    public void setTabla(JTable tabla) {
        this.tabla = tabla;
    }

    public String getTipoUsu() {
        return tipoUsu;
    }

    public void setTipoUsu(String tipoUsu) {
        this.tipoUsu = tipoUsu;
    }

    /**
     * Creates new form GestionCitasCliente
     */
    public GestionCitasVentana() {
        initComponents();
        setIconImage(getIconImage());
        comprobarTabla();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        modificarDiseÃ±o();
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage("./src/images/iconoDeAppEscritorio.png");
        return retValue;
    }

    public void comprobarTabla() {
        if (tabla.getRowCount() > 0) {
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();
            model.setRowCount(0);
        } else {
            llenarTabla();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        espaciado = new javax.swing.JLabel();
        panelSuperior = new javax.swing.JPanel();
        espacio1 = new javax.swing.JLabel();
        btnPedir = new javax.swing.JButton();
        espacio2 = new javax.swing.JLabel();
        btnModificar = new javax.swing.JButton();
        espacio3 = new javax.swing.JLabel();
        btnBorrar = new javax.swing.JButton();
        espacio4 = new javax.swing.JLabel();
        espacio5 = new javax.swing.JLabel();
        panelTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        panelInferior = new javax.swing.JPanel();
        espaciado2 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        espaciado3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelPrincipal.setBackground(new java.awt.Color(102, 102, 255));
        panelPrincipal.setPreferredSize(this.getSize());
        panelPrincipal.setLayout(new java.awt.BorderLayout(0, 9));

        espaciado.setText("    ");
        panelPrincipal.add(espaciado, java.awt.BorderLayout.WEST);

        panelSuperior.setOpaque(false);

        espacio1.setText("                  ");
        panelSuperior.add(espacio1);

        btnPedir.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnPedir.setText("Pedir Cita");
        btnPedir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPedirActionPerformed(evt);
            }
        });
        panelSuperior.add(btnPedir);

        espacio2.setText("              ");
        panelSuperior.add(espacio2);

        btnModificar.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnModificar.setText("Modificar Cita");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        panelSuperior.add(btnModificar);

        espacio3.setText("             ");
        panelSuperior.add(espacio3);

        btnBorrar.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnBorrar.setText("Anular Cita");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });
        panelSuperior.add(btnBorrar);

        espacio4.setText("              ");
        panelSuperior.add(espacio4);

        espacio5.setText("                  ");
        panelSuperior.add(espacio5);

        panelPrincipal.add(panelSuperior, java.awt.BorderLayout.NORTH);

        panelTabla.setOpaque(false);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null}
                },
                new String[]{
                    "Fecha", "Hora", "Servicio", "Precio", "Empleado"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setResizable(false);
            tabla.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout panelTablaLayout = new javax.swing.GroupLayout(panelTabla);
        panelTabla.setLayout(panelTablaLayout);
        panelTablaLayout.setHorizontalGroup(
                panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 979, Short.MAX_VALUE)
        );
        panelTablaLayout.setVerticalGroup(
                panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
        );

        panelPrincipal.add(panelTabla, java.awt.BorderLayout.CENTER);

        panelInferior.setOpaque(false);
        panelInferior.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        espaciado2.setText("                                                                                                                                              ");
        panelInferior.add(espaciado2);

        btnSalir.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnSalir.setText("VOLVER A MENU PRINCIPAL");
        btnSalir.setActionCommand("");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        panelInferior.add(btnSalir);

        panelPrincipal.add(panelInferior, java.awt.BorderLayout.PAGE_END);

        espaciado3.setText("    ");
        panelPrincipal.add(espaciado3, java.awt.BorderLayout.EAST);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 1003, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            //GEN-FIRST:event_btnModificarActionPerformed
            // TODO add your handling code here:
            // Crear el ComboBox y cargar las filas de la tabla

            if (tipoUsu.contains("Administrador")) {
                opcionesHorario = new String[]{"Fecha", "Hora", "Servicio", "Precio", "Personal"};

                String seleccionAdmin = (String) JOptionPane.showInputDialog(null, "Selecciona una opciÃ³n:", "Opciones", JOptionPane.PLAIN_MESSAGE, null, opcionesHorario, opcionesHorario[0]);

                ArrayList<String> listaHorariosAdmin = obtenerHorarios();
                Object[] opcionesHorarioAdmin = listaHorariosAdmin.toArray();
                Object seleccionHorario = JOptionPane.showInputDialog(null, "Selecciona un horario para modificar " + seleccionAdmin + ": ", "Horarios", JOptionPane.PLAIN_MESSAGE, null, opcionesHorarioAdmin, opcionesHorarioAdmin[0]);
                String horarioAdminEscogido = seleccionHorario.toString();
                String[] partesHorario = horarioAdminEscogido.split(", ");
                String fechaAdmin = partesHorario[0].split(": ")[1];
                String horaAdmin = partesHorario[1].split(": ")[1];
                String servicioAdmin = partesHorario[2].split(": ")[1];
                String clienteAdmin = partesHorario[3].split(": ")[1];
                String personalAdmin = partesHorario[4].split(": ")[1];
                String precioAdmin = partesHorario[5].split(": ")[1];

                int horarioAdminId = obtenerIdHorario(fechaAdmin, horaAdmin, servicioAdmin);
                switch (seleccionAdmin) {
                    case "Fecha":
                        modificarFecha(horarioAdminId);
                        llenarTablaTodosLosClientes();
                        break;
                    case "Hora":
                        modificarServicioHora(horarioAdminId);
                        llenarTablaTodosLosClientes();
                        break;
                    case "Servicio":
                        Horario horAdmin = new Horario(horarioAdminId, fechaAdmin, horaAdmin, servicioAdmin);
                        modificarServicio(horAdmin);
                        llenarTablaTodosLosClientes();
                        break;
                    case "Precio":
                        Horario horAdminPrecio = new Horario(horarioAdminId, fechaAdmin, horaAdmin, servicioAdmin);
                        modificarPrecio(horAdminPrecio);
                        llenarTablaTodosLosClientes();
                        break;
                    case "Personal":
                        Horario horAdminPersonal = new Horario(horarioAdminId, fechaAdmin, horaAdmin, servicioAdmin, precioServicio, personalAdmin);
                        modificarPersonal(horAdminPersonal);
                        llenarTablaTodosLosClientes();
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "OpciÃ³n no vÃ¡lida");
                }
            } else {
                opcionesHorario = new String[]{"Fecha", "Hora", "Servicio"};

                String seleccion = (String) JOptionPane.showInputDialog(null, "Selecciona una opciÃ³n:", "Opciones", JOptionPane.PLAIN_MESSAGE, null, opcionesHorario, opcionesHorario[0]);

                ArrayList<String> listaHorarios = obtenerHorariosConCita();
                Object[] opcionesHorario = listaHorarios.toArray();
                Object seleccionHorario = JOptionPane.showInputDialog(null, "Selecciona un horario para modificar " + seleccion + ": ", "Horarios", JOptionPane.PLAIN_MESSAGE, null, opcionesHorario, opcionesHorario[0]);
                String horarioEscogido = seleccionHorario.toString();
                String[] partes = horarioEscogido.split(", ");
                // Extraer los valores individuales
                String fecha = partes[0].substring(partes[0].indexOf(":") + 2);
                String hora = partes[1].substring(partes[1].indexOf(":") + 2);
                String servicio = partes[2].substring(partes[2].indexOf(":") + 2);
                String cliente = partes[3].substring(partes[3].indexOf(":") + 2);
                String precio = partes[4].substring(partes[4].indexOf(":") + 2);

                int horarioId = obtenerIdHorario(fecha, hora, servicio);
                switch (seleccion) {
                    case "Fecha":
                        modificarServicioFecha(horarioId);
                        llenarTablaHorario(id);
                        break;
                    case "Hora":
                        modificarServicioHora(horarioId);
                        llenarTablaHorario(id);
                        break;
                    case "Servicio":
                        Horario horario = new Horario(horarioId, fecha, hora, servicio);
                        modificarServicio(horario);
                        llenarTablaHorario(id);
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "Seleccione una opcion");
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(GestionCitasVentana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void modificarFecha(int fechaActual) {
        // AquÃ­ puedes implementar el cÃ³digo para modificar la fecha
        DatePicker nuevaFecha = new DatePicker();
        JOptionPane.showConfirmDialog(null, nuevaFecha, "Introduce nueva fecha", JOptionPane.OK_OPTION);
        String fechaActualizada = nuevaFecha.getDate().toString();
        consultas.modificarServicioPorFecha(fechaActualizada, fechaActual);
        // Por ejemplo, puedes mostrar un JOptionPane con un datepicker para que el usuario seleccione una nueva fecha
    }

    public void modificarPrecio(Horario precioActual) {
        // AquÃ­ puedes implementar el cÃ³digo para modificar el precio
        String nuevoPrecioStr = JOptionPane.showInputDialog(null, "Introduce el nuevo precio:");
        double nuevoPrecio = Double.parseDouble(nuevoPrecioStr);
        String descripcion = precioActual.getDescripcion();
        int idServicio = obtenerIdServicio(descripcion);

        // Crear la consulta SQL para actualizar el precio del servicio
        String sql = "UPDATE servicios SET precio = ? WHERE id = ?";

        // Conectar a la base de datos y ejecutar la consulta
        try {
            realizarConexion();
            PreparedStatement pstmt = con.prepareStatement(sql);

            // Establecer los valores de los parÃ¡metros de la consulta
            pstmt.setDouble(1, nuevoPrecio);
            pstmt.setInt(2, idServicio);

            // Ejecutar la consulta
            pstmt.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error modificando el precio");
        }
    }

    public void modificarPersonal(Horario personalActual) {
        // AquÃ­ puedes implementar el cÃ³digo para modificar el personal
        ArrayList<String> personalPelu = obtenerPersonal();
        JComboBox comboboxPers = new JComboBox(personalPelu.toArray());
        JOptionPane.showConfirmDialog(null, comboboxPers, "Seleccione Nuevo Personal", JOptionPane.OK_OPTION);
        String nuevoS = comboboxPers.getSelectedItem().toString();
        String[] personal = nuevoS.split(", ");
        String nombreP = personal[0].split(": ")[1];
        String apellidosP = personal[1].split(": ")[1];
        int idP = consultas.obtenerIdUsuario(nombreP, apellidosP);
        modificarPersonal(personalActual, idP);
    }

//GEN-LAST:event_btnModificarActionPerformed
    private double obtenerNuevoPrecio() throws NumberFormatException, HeadlessException {
        // Solicitar al usuario ingresar el nuevo precio
        String precioStr = JOptionPane.showInputDialog(null, "Ingrese el nuevo precio:");
        double precio = Double.parseDouble(precioStr);
        return precio;
    }

    // MÃ©todo para obtener los horarios con cita asignada
    public ArrayList<String> obtenerHorariosConCita() {
        ArrayList<String> horariosConCita = new ArrayList<>();

        try {
            // Establecer la conexiÃ³n a la base de datos (debes configurar tus propios datos de conexiÃ³n)
            realizarConexion();

            // Consulta SQL para obtener los horarios con cita asignada
            String query = "SELECT horario.fecha, horario.hora, servicios.precio,servicios.descripcion, usuario.nombre,usuario.apellidos FROM horario JOIN cita ON horario.id = cita.id_horario JOIN usuario ON cita.id_cliente = usuario.id JOIN servicios ON horario.id_servicio = servicios.id WHERE horario.id_personal=?";

            // Crear un Statement para ejecutar la consulta
            PreparedStatement statement = con.prepareStatement(query);
            statement.setInt(1, id);
            // Ejecutar la consulta y obtener el resultado
            ResultSet resultSet = statement.executeQuery();

            // Recorrer el resultado y agregar los campos a la lista
            while (resultSet.next()) {
                String fecha = resultSet.getString("fecha");
                String hora = resultSet.getString("hora");
                String servicio = resultSet.getString("descripcion");
                Double precio = resultSet.getDouble("precio");
                String nombreCliente = resultSet.getString("nombre");
                String apellidosCliente = resultSet.getString("apellidos");
                String cliente = nombreCliente + " " + apellidosCliente;
                // Construir la cadena con los campos y agregarla a la lista
                String horarioConCita = "Fecha: " + fecha + ", Hora: " + hora + ", Servicio: " + servicio + ", Cliente: " + cliente + ", Precio: " + String.valueOf(precio);
                horariosConCita.add(horarioConCita);
            }

            // Cerrar el ResultSet, el Statement y la conexiÃ³n
            resultSet.close();
            statement.close();
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return horariosConCita;
    }

    private void modificarServicioFecha(int idHorario) throws HeadlessException {
        DatePicker nuevaFecha = new DatePicker();
        JOptionPane.showConfirmDialog(null, nuevaFecha, "Introduce nueva fecha", JOptionPane.OK_OPTION);
        String fechaActualizada = nuevaFecha.getDate().toString();
        int idCita = idHorario;
        consultas.modificarServicioPorFecha(fechaActualizada, idCita);
    }

    private void modificarServicio(Horario horarioSeleccionado) throws HeadlessException {
        ArrayList<String> listaServ = consultas.serviciosBD();
        JComboBox comboboxServ = new JComboBox(listaServ.toArray());
        JOptionPane.showConfirmDialog(null, comboboxServ, "Seleccione nuevo servicio", JOptionPane.OK_OPTION);
        String nuevoS = comboboxServ.getSelectedItem().toString();
        idS = consultas.cogerIdServicio(nuevoS);
        int horarioServId = horarioSeleccionado.getId();
        consultas.modificarServicio(idS, horarioServId);
    }

    private void btnPedirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPedirActionPerformed
        if (tipoUsu.contains("Administrador")) {
            //Metodo para administrador
            obtenerDatos();
        } else {
            //Metodo para personal
            insertarCitaPersonal();
        }

    }//GEN-LAST:event_btnPedirActionPerformed

    private void insertarCitaPersonal() throws HeadlessException {
        ArrayList<String> listaHorarios = obtenerHorariosSinCitas(id);
        DefaultComboBoxModel<String> empleadoModel = new DefaultComboBoxModel<>(listaHorarios.toArray(new String[0]));
        comboBoxHorarios = new JComboBox<>(empleadoModel);
        int result = JOptionPane.showConfirmDialog(null, comboBoxHorarios, "Elige el horario", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            String horario = comboBoxHorarios.getSelectedItem().toString();
            String[] parts = horario.split(", ");
            String fecha = parts[0].split(": ")[1];
            String hora = parts[1].split(": ")[1];
            String servicio = parts[2].split(": ")[1];
            int idHorario = obtenerIdHorarioPersonal(fecha, hora, servicio);
            JOptionPane.showMessageDialog(null, horario);
            ArrayList<String> listaClientes = obtenerClientes();
            DefaultComboBoxModel<String> clienteModel = new DefaultComboBoxModel<>(listaClientes.toArray(new String[0]));
            comboBoxHorarios = new JComboBox<>(clienteModel);
            int resultadoCliente = JOptionPane.showConfirmDialog(null, comboBoxHorarios, "Elige el cliente", JOptionPane.OK_CANCEL_OPTION);
            if (resultadoCliente == JOptionPane.OK_OPTION) {
                String seleccion = comboBoxHorarios.getSelectedItem().toString();
                String[] partes = seleccion.split(", ");
                String nombreC = partes[0].split(": ")[1];
                String apellidoC = partes[1].split(": ")[1];
                int idCliente = consultas.obtenerIdUsuario(nombreC, apellidoC);
                insertarCita(idCliente, idHorario);
            }
        }
    }

    public void insertarCita(int idcliente, int idHorario) {
        try {
            realizarConexion();

            PreparedStatement psC = con.prepareStatement("INSERT INTO cita (ID_CLIENTE, ID_HORARIO) VALUES (?,?)");
            psC.setInt(1, idcliente);
            psC.setInt(2, idHorario);
            int filasAfec = psC.executeUpdate();
            if (filasAfec<=0) {
                JOptionPane.showMessageDialog(null, "No se pudo hacer la cita");
            }else{
                JOptionPane.showMessageDialog(null, "Cita creada exitosamente");
            }
            llenarTablaHorario(id);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No se pudo hacer la cita");
        }
    }

    public ArrayList<String> obtenerClientes() {
        ArrayList<String> clientes = new ArrayList<>();
        realizarConexion();
        try {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT nombre, apellidos FROM usuario WHERE tipo_de_usuario='Cliente'");
            while (rs.next()) {
                String nombre = rs.getString("nombre");
                String apellidos = rs.getString("apellidos");
                clientes.add("nombre: " + nombre + ", apellidos: " + apellidos);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar clientes");
        }
        return clientes;
    }

    public ArrayList<String> obtenerPersonal() {
        ArrayList<String> clientes = new ArrayList<>();
        realizarConexion();
        try {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT nombre, apellidos FROM usuario WHERE tipo_de_usuario='Personal' AND nombre != 'administrador'");
            while (rs.next()) {
                String nombre = rs.getString("nombre");
                String apellidos = rs.getString("apellidos");
                clientes.add("Nombre: " + nombre + ", Apellidos: " + apellidos);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar clientes");
        }
        return clientes;
    }

    public ArrayList<String> obtenerHorariosSinCitas(int idPersonal) {
        ArrayList<String> horariosSinCitas = new ArrayList<>();

        try {
            // Establecer la conexiÃ³n a la base de datos
            realizarConexion();
            // Consulta SQL para obtener los horarios sin citas
            String sql = "SELECT h.fecha_es, h.hora_es, s.descripcion AS servicio FROM horario h LEFT JOIN cita c ON h.id = c.ID_HORARIO LEFT JOIN servicios s ON h.id_servicio = s.id WHERE c.ID_HORARIO IS NULL AND h.ID_PERSONAL = ?";
            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setInt(1, idPersonal);
            ResultSet rs = stmt.executeQuery();
            // Recorre los resultados de la consulta
            while (rs.next()) {
                String fecha = rs.getString("fecha_es");
                String hora = rs.getString("hora_es");
                String servicio = rs.getString("servicio");
                String horarioString = "Fecha: " + fecha + ", Hora: " + hora + ", Servicio: " + servicio;
                horariosSinCitas.add(horarioString);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al buscar los horarios");
        }

        return horariosSinCitas;
    }

    public void obtenerDatos() {
        // Crear los componentes de fecha y hora
        DatePicker datePicker = new DatePicker();
        TimePicker timePicker = new TimePicker();
        // Crear el combobox para empleados
        ArrayList<Usuario> listaEmpleados = consultas.obtenerListaEmpleados();
        DefaultComboBoxModel<Usuario> empleadoModel = new DefaultComboBoxModel<>(listaEmpleados.toArray(new Usuario[0]));
        JComboBox<Usuario> empleadoComboBox = new JComboBox<>(empleadoModel);

        // Crear el combobox para servicios
        ArrayList<Servicio> listaServicios = consultas.obtenerListaServicios();
        DefaultComboBoxModel<Servicio> servicioModel = new DefaultComboBoxModel<>(listaServicios.toArray(new Servicio[0]));
        JComboBox<Servicio> servicioComboBox = new JComboBox<>(servicioModel);

        // Crear el panel de entrada de datos
        JPanel panel = new JPanel(new GridLayout(4, 2));
        panel.add(new JLabel("Fecha:"));
        panel.add(datePicker);
        panel.add(new JLabel("Hora:"));
        panel.add(timePicker);
        panel.add(new JLabel("Empleado:"));
        panel.add(empleadoComboBox);
        panel.add(new JLabel("Servicio:"));
        panel.add(servicioComboBox);

        // Mostrar el panel de entrada de datos en un diÃ¡logo
        int result = JOptionPane.showConfirmDialog(null, panel, "Ingrese los datos", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            // Obtener los valores seleccionados
            String fecha = datePicker.getDate().toString();
            String hora = timePicker.getTime().toString();
            Usuario empleado = (Usuario) empleadoComboBox.getSelectedItem();
            Servicio servicio = (Servicio) servicioComboBox.getSelectedItem();

            // Realizar la inserciÃ³n en la tabla de horario
            insertarHorario(fecha, hora, empleado.getId(), servicio.getId());
        }
    }

    public void insertarHorario(String fecha, String hora, int idEmpleado, int idServicio) {
        try {
            // Consulta de inserciÃ³n para la tabla horario
            realizarConexion();
            PreparedStatement statement = con.prepareStatement(
                    "INSERT INTO horario (fecha, hora, id_personal, id_servicio) VALUES (?, ?, ?, ?)");
            statement.setString(1, fecha);
            statement.setString(2, hora);
            statement.setInt(3, idEmpleado);
            statement.setInt(4, idServicio);

            // Ejecutar la consulta
            statement.executeUpdate();
            llenarTablaTodosLosClientes();
            statement.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al insertar\n" + e.getMessage());
        }
    }

    private void pedirDatos() throws HeadlessException {
        /* // TODO add your handling code here:
        // Crear un JDateChooser
        DatePicker dateChooser = new DatePicker();
        int result = JOptionPane.showConfirmDialog(null, dateChooser, "Selecciona fecha", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            fecha = dateChooser.getDate().toString();
            comprobarFecha();
        }*/
    }

    private void comprobarFecha() throws HeadlessException {
        try {
            conexion = realizarConexion();
            String sql = "SELECT * FROM `horario` WHERE fecha LIKE ?;";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, fecha);
            ResultSet rs = ps.executeQuery();
            if (!rs.next()) {
                JOptionPane.showMessageDialog(null, "No hay servicios disponibles para esa fecha");
            } else {
                while (true) {
                    idServ = rs.getInt("ID_SERVICIO");
                    consultaServicios();
                    listaDatos.add(datoServ);
                    if (!rs.next()) {
                        break;
                    }
                }
                comboBox = new JComboBox(listaDatos.toArray());
                int decisionServ = JOptionPane.showConfirmDialog(null, comboBox, "Seleccione servicio", JOptionPane.OK_CANCEL_OPTION);
                if (decisionServ == JOptionPane.OK_OPTION) {
                    comprobarServicio();
                    insertarCita();
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No se puede continuar con la peticiÃ³n. Error con la base de datos");
        }
    }

    private void insertarCita() throws HeadlessException, SQLException {
        String insertarCita = "INSERT INTO CITA (`ID_CLIENTE`, `ID_HORARIO`) VALUES (?,?);";
        PreparedStatement psCita = con.prepareStatement(insertarCita);
        psCita.setInt(1, id);
        String consultarHorario = "SELECT id FROM horario WHERE id_servicio = (SELECT id FROM servicios WHERE descripcion LIKE ?)  AND FECHA LIKE ?";
        PreparedStatement psHorario = con.prepareStatement(consultarHorario);
        psHorario.setString(1, descripcionServicio);
        psHorario.setString(2, fecha);
        ResultSet resulHorario = psHorario.executeQuery();
        while (resulHorario.next()) {
            idHorario = resulHorario.getInt(1);
        }
        psCita.setInt(2, idHorario);
        int insercion = psCita.executeUpdate();
        if (insercion == 0) {
            JOptionPane.showMessageDialog(null, "No se pudo realizar la cita");
        } else {
            llenarTabla();
        }
    }

    private void comprobarServicio() {
        servicioEscogido = comboBox.getSelectedItem().toString();
        String delimitador = ": ";
        int inicio = servicioEscogido.indexOf(delimitador) + delimitador.length();
        int fin = servicioEscogido.lastIndexOf(" ");
        serviciocompleto = servicioEscogido.substring(inicio, fin);
        descripcionServicio = serviciocompleto.substring(0, serviciocompleto.indexOf(" "));
        precioServicio = servicioEscogido.substring(servicioEscogido.lastIndexOf(": ") + 2, servicioEscogido.length());
    }

    private void consultaServicios() throws SQLException {
        String sqlServicio = "SELECT DESCRIPCION,PRECIO FROM SERVICIOS WHERE ID=?";
        PreparedStatement ps2 = con.prepareStatement(sqlServicio);
        ps2.setInt(1, idServ);
        ResultSet resultado = ps2.executeQuery();
        while (resultado.next()) {
            String descripcion = resultado.getString("DESCRIPCION");
            Float precio = resultado.getFloat("PRECIO");
            datoServ = "Nombre: " + descripcion + " Precio: " + precio.toString();
        }
    }

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        vc = new VentanaPrincipal();
        vaciarTabla();
        dispose();
        vc.setTipoUsu(tipoUsu);
        vc.setVisible(true);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {
        if (tipoUsu.contains("Administrador")) {
            try {
                borradoAdmin();
                llenarTablaTodosLosClientes();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "No se pudo actualizar la tabla");
            }
        } else {
            ArrayList<String> datosTabla = consultas.obtenerHorariosConCita(id);
            comboBoxDatos = new JComboBox<>(datosTabla.toArray(new String[0]));
            if (datosTabla == null) {
                JOptionPane.showMessageDialog(null, "No hay ninguna cita que borrar. No existen citas");
            } else {
                int option2 = JOptionPane.showOptionDialog(null, comboBoxDatos, "Seleccione una cita para borrar", JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
                // Realizar la acciÃ³n correspondiente segÃºn la selecciÃ³n del usuario
                if (option2 == JOptionPane.OK_OPTION) {
                    String citaSeleccionada = comboBoxDatos.getSelectedItem().toString();
                    System.out.println(citaSeleccionada);
                    int confirmacion = JOptionPane.showConfirmDialog(null, "Â¿EstÃ¡ seguro de que desea borrar la cita seleccionada?", "Borrar cita", JOptionPane.OK_CANCEL_OPTION);
                    if (confirmacion == JOptionPane.OK_OPTION) {
                        try {
                            int idClienteSeleccionado = obtenerIdCliente(citaSeleccionada);
                            int idHorarioSeleccionado = obtenerIdHorario(citaSeleccionada);
                            realizarConexion();
                            String sqlBorradoCita = "DELETE FROM CITA WHERE ID_CLIENTE=? AND ID_HORARIO=?";
                            PreparedStatement psBorradoCita = con.prepareStatement(sqlBorradoCita);
                            psBorradoCita.setInt(1, idClienteSeleccionado);
                            psBorradoCita.setInt(2, idHorarioSeleccionado);
                            int resultado = psBorradoCita.executeUpdate();
                            if (resultado == 0) {
                                JOptionPane.showMessageDialog(null, "No se pudo borrar la cita");
                            } else {
                                JOptionPane.showMessageDialog(null, "Borrado exitoso");

                            }
                            llenarTablaHorario(id);
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, "Error al mostrar las citas");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private int obtenerIdHorario(String citaSeleccionada) throws SQLException {
        int identHorario = -1;
        String[] parts = citaSeleccionada.split(", ");

        String[] strings = new String[parts.length];
        for (int i = 0; i < parts.length; i++) {
            String[] keyValue = parts[i].split(": ");
            strings[i] = keyValue[1];
        }

        String fechaHorario = strings[0];
        String horaHorario = strings[1];
        String servicioHorario = strings[2];
        String precio = strings[3];
        String cliente = strings[4];
        int idServicio = obtenerIdServicio(servicioHorario);
        realizarConexion();
        String consultaHorario = "SELECT id FROM horario WHERE fecha_es = ? AND hora_es = ? AND id_servicio = ?;";
        PreparedStatement psIdHorario = con.prepareStatement(consultaHorario);
        psIdHorario.setString(1, fechaHorario);
        psIdHorario.setString(2, horaHorario);
        psIdHorario.setInt(3, idServicio);
        ResultSet rs = psIdHorario.executeQuery();
        while (rs.next()) {
            identHorario = rs.getInt("id");
        }
        return identHorario;
    }

    private int obtenerIdCliente(String citaSeleccionada) throws SQLException {
        int idCliente = -1;
        // Buscar el Ã­ndice de inicio del nombre del cliente
        int indiceInicio = citaSeleccionada.indexOf("Cliente: ") + 9;
        // Extraer el nombre del cliente
        String nombreCliente = citaSeleccionada.substring(indiceInicio);
        realizarConexion();
        // Verificar si hay mÃ¡s de un espacio en el nombre
        if (nombreCliente.contains(" ")) {
            // Separar el nombre en partes
            String[] partesNombre = nombreCliente.split(" ", 2);

            String nombreC = partesNombre[0]; // Primer nombre
            String apellidosCliente = partesNombre[1]; // Apellidos

            String consultaCliente = "SELECT ID FROM USUARIO WHERE NOMBRE LIKE ? AND APELLIDOS LIKE ?";
            PreparedStatement psCliente = con.prepareStatement(consultaCliente);
            psCliente.setString(1, nombreC);
            psCliente.setString(2, apellidosCliente);
            ResultSet rsCli = psCliente.executeQuery();
            if (rsCli.next()) {
                idCliente = rsCli.getInt("ID");
            }
        } else {
            String consultaCliente = "SELECT ID FROM USUARIO WHERE NOMBRE LIKE ?";
            PreparedStatement psCliente = con.prepareStatement(consultaCliente);
            psCliente.setString(1, nombreCliente);
            ResultSet rsCli = psCliente.executeQuery();
            if (rsCli.next()) {
                idCliente = rsCli.getInt("ID");
            }
        }
        return idCliente;
    }
    
    private void borradoAdmin() throws HeadlessException {
        //GEN-FIRST:event_btnBorrarActionPerformed
        // TODO add your handling code here:
        ArrayList<String> horarios = obtenerHorarios();
        String[] horariosArray = horarios.toArray(new String[0]);

        // Mostrar el menÃº desplegable con JOptionPane
        String horarioSeleccionado = (String) JOptionPane.showInputDialog(null, "Seleccione un horario a borrar:", "Borrar Horario", JOptionPane.QUESTION_MESSAGE, null, horariosArray, horariosArray[0]);
        System.out.println(horarioSeleccionado);
        int decision = JOptionPane.showConfirmDialog(null, "Seguro que desea borrar el horario seleccionado (ten en cuenta que puede contener un cliente)", "Confirmacion", JOptionPane.YES_NO_OPTION);
        if (decision == JOptionPane.YES_OPTION) {
            try {
                realizarConexion();
                int idHorario = buscarIdHorario(horarioSeleccionado);
                String sql = "DELETE FROM HORARIO WHERE ID=?";
                PreparedStatement psD = con.prepareStatement(sql);
                psD.setInt(1, idHorario);
                int resultado = psD.executeUpdate();
                if (resultado == 0) {
                    JOptionPane.showMessageDialog(null, "No se pudo borrar la cita.");
                } else {
                    JOptionPane.showMessageDialog(null, "Borrado exitoso");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error al intentar borrar el horario");
            }

        }

        /**/
    }

    private int buscarIdHorario(String horarioSeleccionado) throws SQLException {
        int idH = -1;
        String busquedaIdHorario = "SELECT ID FROM HORARIO WHERE FECHA LIKE ? AND HORA LIKE ?";
        String[] parts = horarioSeleccionado.split(", ");
        String[] strings = new String[parts.length];
        for (int i = 0; i < parts.length; i++) {
            String[] keyValue = parts[i].split(": ");
            strings[i] = keyValue[1];
        }

        String fechaH = strings[0];
        String horaH = strings[1];
        String servicioH = strings[2];
        String clienteH = strings[3];
        String personalH = strings[4];
        String precio = strings[5];
        PreparedStatement ps = con.prepareStatement(busquedaIdHorario);
        ps.setString(1, fechaH);
        ps.setString(2, horaH);
        ResultSet rs = ps.executeQuery();
        while (rs.next()) {
            idH = rs.getInt("id");
        }
        return idH;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionCitasVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionCitasVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionCitasVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionCitasVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionCitasVentana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnPedir;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel espaciado;
    private javax.swing.JLabel espaciado2;
    private javax.swing.JLabel espaciado3;
    private javax.swing.JLabel espacio1;
    private javax.swing.JLabel espacio2;
    private javax.swing.JLabel espacio3;
    private javax.swing.JLabel espacio4;
    private javax.swing.JLabel espacio5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JPanel panelTabla;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    public void modificarDiseÃ±o() {
        //Botones
        if (tipoUsu != null) {
            if (tipoUsu.contains("Administrador")) {
                btnPedir.setText("AÃ±adir horario");
                btnModificar.setText("Modificar horario");
                btnBorrar.setText("Borrar horario");
            } else {
                btnPedir.setText("Concertar Cita");
                btnModificar.setText("Modificar Cita");
                btnBorrar.setText("Anular Cita");

            }
        }
        btnSalir.putClientProperty(this, "roundrect");
        btnPedir.putClientProperty(this, "roundrect");
        btnModificar.putClientProperty(this, "roundrect");
        btnBorrar.putClientProperty(this, "roundrect");
        //Tabla
        tabla.setFillsViewportHeight(true);
        tabla.setCellSelectionEnabled(false);
    }

    void llenarTabla() {
        try {
            int idC = id;
            if (tipoUsu != null) {
                if (idC != 0 && !tipoUsu.equals("Administrador")) {
                    llenarTablaHorario(idC);
                } else {
                    llenarTablaTodosLosClientes();
                }
            }
        } catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(null, "Error intentando conectar a la base de datos");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No se pudo llenar la tabla");
        }
    }

    private void llenarTablaTodosLosClientes() throws SQLException {
        DefaultTableModel modeloGeneral = new DefaultTableModel(columnasAdmin, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        conexion = realizarConexion();
        String mostrarTodas = "SELECT horario.fecha_es AS fecha, horario.hora_es AS hora, servicios.descripcion, servicios.precio, IFNULL(CONCAT(cliente.nombre, ' ', cliente.apellidos), 'No hay cliente') AS cliente, CONCAT(personal.nombre, ' ', personal.apellidos) AS empleado "
                + "FROM horario "
                + "LEFT JOIN cita ON horario.id = cita.ID_HORARIO "
                + "LEFT JOIN usuario AS cliente ON cita.ID_CLIENTE = cliente.ID "
                + "JOIN usuario AS personal ON horario.id_personal = personal.id "
                + "JOIN servicios ON horario.id_servicio = servicios.id ORDER BY horario.fecha ASC;";

        Statement statement = con.createStatement();
        ResultSet resultado = statement.executeQuery(mostrarTodas);
        while (resultado.next()) {
            String fecha = resultado.getString("fecha");
            String hora = resultado.getString("hora");
            String descripcion = resultado.getString("descripcion");
            String precio = resultado.getString("precio");
            String cliente = resultado.getString("cliente");
            String empleado = resultado.getString("empleado");
            String[] fila = {fecha, hora, descripcion, precio, cliente, empleado};
            modeloGeneral.addRow(fila);
        }
        tabla.setModel(modeloGeneral);
        tabla.setCellSelectionEnabled(false);
    }

    private void llenarTablaHorario(int idPersonal) throws SQLException {
        DefaultTableModel modelo = new DefaultTableModel(columnas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        conexion = realizarConexion();
        String mostrarHorarioPersonal = "SELECT horario.fecha_es AS fecha, horario.hora_es AS hora, servicios.descripcion, servicios.precio, IFNULL(CONCAT(usuario.nombre, ' ', usuario.apellidos), 'No hay cliente') AS cliente FROM horario JOIN personal ON horario.id_personal = personal.id LEFT JOIN cita ON horario.id = cita.ID_HORARIO LEFT JOIN usuario ON cita.ID_CLIENTE = usuario.ID JOIN servicios ON horario.id_servicio = servicios.id WHERE personal.id = ? ORDER BY horario.fecha ASC;";
        PreparedStatement stmt = con.prepareStatement(mostrarHorarioPersonal);
        stmt.setInt(1, idPersonal);
        ResultSet resultado = stmt.executeQuery();
        while (resultado.next()) {
            String fecha = resultado.getString("fecha");
            String hora = resultado.getString("hora");
            String descripcion = resultado.getString("descripcion");
            String precio = resultado.getString("precio");
            String cliente = resultado.getString("cliente");
            String[] fila = {fecha, hora, descripcion, precio, cliente};
            modelo.addRow(fila);
        }
        tabla.setModel(modelo);
        tabla.setCellSelectionEnabled(false);
    }

    /*private void llenarTablaCliente(int idC) throws SQLException {

        DefaultTableModel modelo = new DefaultTableModel(columnas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
            }

        };

        conexion = realizarConexion();
        String mostrarCitasDeCliente = "SELECT horario.fecha_es as fecha, horario.hora_es as hora, servicios.descripcion, servicios.precio,CONCAT(usuario.nombre, ' ', usuario.apellidos) AS empleado\n"
                + "FROM cita JOIN horario ON cita.id_horario = horario.ID JOIN personal ON horario.id_personal = personal.id JOIN usuario ON personal.id = usuario.id JOIN servicios ON horario.id_servicio = servicios.id\n"
                + "WHERE cita.id_cliente = ?;"; // Ejecutar la consulta y agregar los resultados al modelo
        PreparedStatement stmt = con.prepareStatement(mostrarCitasDeCliente);
        stmt.setInt(1, idC);
        ResultSet resultado = stmt.executeQuery();
        while (resultado.next()) {
            String fecha = resultado.getString("fecha");
            String hora = resultado.getString("hora");
            String descripcion = resultado.getString("descripcion");
            String precio = resultado.getString("precio");
            String empleado = resultado.getString("empleado");
            String[] fila = {fecha, hora, descripcion, precio, empleado};
            modelo.addRow(fila);
        }
        tabla.setModel(modelo);
        tabla.setCellSelectionEnabled(false);
    }*/
    private ConexionBD realizarConexion() {
        ConexionBD conexion = new ConexionBD("admin", "123pelu");
        con = conexion.getConnection();
        return conexion;
    }

    void setValor(int id) {
        this.id = id;
    }

    private void vaciarTabla() {
        tabla.setModel(new DefaultTableModel(0, 0));
        vc.setId(id);
    }

    private void modificarServicioHora(int horarioId) {
        TimePicker nuevaFecha = new TimePicker();
        JOptionPane.showConfirmDialog(null, nuevaFecha, "Introduce nueva hora", JOptionPane.OK_OPTION);
        String horaActualizada = nuevaFecha.getTime().toString();
        int idCita = horarioId;
        consultas.modificarServicioPorHora(horaActualizada, idCita);
    }

    public int obtenerIdHorario(String fecha, String hora, String servicio) {
        int idServicio = -1;
        int idHorario = -1;
        realizarConexion();
        try {
            PreparedStatement pstmt = con.prepareStatement("SELECT id FROM servicios WHERE descripcion=?");
            pstmt.setString(1, servicio);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    idServicio = rs.getInt("id");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al buscar el servicio");
        }
        if (idServicio != -1) {
            try {
                PreparedStatement pstmt = con.prepareStatement("SELECT id FROM horario WHERE fecha=? AND hora=? AND id_servicio=?");
                pstmt.setString(1, fecha);
                pstmt.setString(2, hora);
                pstmt.setInt(3, idServicio);
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        idHorario = rs.getInt("id");
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al coger el horario");
            }
        }
        return idHorario;
    }
    public int obtenerIdHorarioPersonal(String fecha, String hora, String servicio) {
        int idServicio = -1;
        int idHorario = -1;
        realizarConexion();
        try {
            PreparedStatement pstmt = con.prepareStatement("SELECT id FROM servicios WHERE descripcion=?");
            pstmt.setString(1, servicio);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    idServicio = rs.getInt("id");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al buscar el servicio");
        }
        if (idServicio != -1) {
            try {
                PreparedStatement pstmt = con.prepareStatement("SELECT id FROM horario WHERE fecha_es=? AND hora_es=? AND id_servicio=?");
                pstmt.setString(1, fecha);
                pstmt.setString(2, hora);
                pstmt.setInt(3, idServicio);
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        idHorario = rs.getInt("id");
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al coger el horario");
            }
        }
        return idHorario;
    }

    private ArrayList<String> obtenerHorarios() {

        ArrayList<String> horarios = new ArrayList<>();

        try {
            realizarConexion();

            String query = "SELECT horario.fecha, horario.hora, servicios.precio, servicios.descripcion, usuario.nombre as nombre_cliente, usuario.apellidos as apellidos_cliente, personal.nombre as nombre_personal, personal.apellidos as apellidos_personal FROM horario LEFT JOIN cita ON horario.id = cita.id_horario LEFT JOIN usuario ON cita.id_cliente = usuario.id JOIN servicios ON horario.id_servicio = servicios.id LEFT JOIN usuario as personal ON horario.id_personal = personal.id";

            Statement statement = con.createStatement();
            ResultSet resultSet = statement.executeQuery(query);

            while (resultSet.next()) {
                String fecha = resultSet.getString("fecha");
                String hora = resultSet.getString("hora");
                String servicio = resultSet.getString("descripcion");
                Double precio = resultSet.getDouble("precio");
                String cliente = "";
                if (resultSet.getString("nombre_cliente") == null && resultSet.getString("apellidos_cliente") == null) {
                    cliente = "No hay cliente asignado";
                } else {
                    String nombreCliente = resultSet.getString("nombre_cliente");
                    String apellidosCliente = resultSet.getString("apellidos_cliente");
                    cliente = nombreCliente + " " + apellidosCliente;
                }
                String personal = "";
                if (resultSet.getString("nombre_personal") == null && resultSet.getString("apellidos_personal") == null) {
                    personal = "No hay personal asignado";
                } else {
                    String nombrePersonal = resultSet.getString("nombre_personal");
                    String apellidosPersonal = resultSet.getString("apellidos_personal");
                    personal = nombrePersonal + " " + apellidosPersonal;
                }
                String precioS = String.valueOf(precio);
                String horario = "Fecha: " + fecha + ", Hora: " + hora + ", Servicio: " + servicio + ", Cliente: " + cliente + ", Personal: " + personal + ", Precio: " + precioS;
                horarios.add(horario);
            }

            resultSet.close();
            statement.close();
            con.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al mostrar todos los horarios");
        }

        return horarios;
    }

    public int obtenerIdServicio(String descripcion) {
        // Variable para almacenar el ID del servicio
        int idServicio = -1;

        // Crear la consulta SQL para obtener el ID del servicio
        String sql = "SELECT id FROM servicios WHERE descripcion = ?";

        // Conectar a la base de datos y ejecutar la consulta
        try {
            realizarConexion();
            PreparedStatement pstmt = con.prepareStatement(sql);

            // Establecer el valor del parÃ¡metro de la consulta
            pstmt.setString(1, descripcion);

            // Ejecutar la consulta y procesar el resultado
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                idServicio = rs.getInt("id");
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        // Devolver el ID del servicio
        return idServicio;
    }

    private void modificarPersonal(Horario personalActual, int idP) {
        try {
            realizarConexion();
            String actualizacion = "UPDATE HORARIO SET ID_PERSONAL=? WHERE ID LIKE ?";
            PreparedStatement ps = con.prepareStatement(actualizacion);
            int idH = obtenerIdHorario(personalActual.getFecha(), personalActual.getHora(), personalActual.getDescripcion());
            ps.setInt(1, idP);
            ps.setInt(2, idH);
            int result = ps.executeUpdate();
            if (result == 0) {
                JOptionPane.showMessageDialog(null, "No se ha podido modificar el servicio, vuelva a intentarlo");
            } else {
                JOptionPane.showMessageDialog(null, "Servicio modificado exitosamente");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error intentando modificar el servicio");
        }
    }

}
