/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DateTimePicker;
import com.github.lgooddatepicker.components.TimePicker;
import controlador.ConexionBD;
import java.awt.GridLayout;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.LookAndFeel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.time.LocalDate;
import javax.swing.JPanel;
import com.toedter.calendar.*;
import controlador.ConsultasCliente;
import java.awt.HeadlessException;
import java.time.LocalTime;
import java.util.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JSpinner;
import javax.swing.JTable;
import modelo.Cita;

/**
 *
 * @author mescr
 */
public class GestionCitasCliente extends javax.swing.JFrame {

    private ConexionBD conexion;
    private Connection con;
    private String servicio, nombre, descripcion;
    private String fecha;
    private int id;
    private String[] columnas = {"Fecha", "Hora", "Servicio", "Precio", "Empleado"};
    private String hora;
    private JComboBox comboBox;
    private ArrayList<String> listaDatos = new ArrayList<>();
    private String datoServ;
    private String servicioEscogido;
    private String serviciocompleto;
    private String descripcionServicio;
    private String precioServicio;
    private int idServ;
    private int idHorario;
    private String servicioCitado;
    private String nuevoServicioCitado;
    private JComboBox<Cita> comboBoxDatos;
    private ConsultasCliente consultas = new ConsultasCliente();
    private VentanaCliente vc;

    public JTable getTabla() {
        return tabla;
    }


    public void setTabla(JTable tabla) {
        this.tabla = tabla;
    }

    /**
     * Creates new form GestionCitasCliente
     */
    public GestionCitasCliente() {
        initComponents();
        comprobarTabla();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        modificarDiseÃ±o();
    }

    public void comprobarTabla() {
        if (tabla.getRowCount()>0) {
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();
            model.setRowCount(0);
        }else{
            llenarTabla();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        espaciado = new javax.swing.JLabel();
        panelSuperior = new javax.swing.JPanel();
        espacio1 = new javax.swing.JLabel();
        btnPedir = new javax.swing.JButton();
        espacio2 = new javax.swing.JLabel();
        btnModificar = new javax.swing.JButton();
        espacio3 = new javax.swing.JLabel();
        btnBorrar = new javax.swing.JButton();
        espacio4 = new javax.swing.JLabel();
        espacio5 = new javax.swing.JLabel();
        panelTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        panelInferior = new javax.swing.JPanel();
        espaciado2 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        espaciado3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelPrincipal.setBackground(new java.awt.Color(102, 102, 255));
        panelPrincipal.setPreferredSize(this.getSize());
        panelPrincipal.setLayout(new java.awt.BorderLayout(0, 9));

        espaciado.setText("    ");
        panelPrincipal.add(espaciado, java.awt.BorderLayout.WEST);

        panelSuperior.setOpaque(false);

        espacio1.setText("                  ");
        panelSuperior.add(espacio1);

        btnPedir.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnPedir.setText("Pedir Cita");
        btnPedir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPedirActionPerformed(evt);
            }
        });
        panelSuperior.add(btnPedir);

        espacio2.setText("              ");
        panelSuperior.add(espacio2);

        btnModificar.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnModificar.setText("Modificar Cita");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        panelSuperior.add(btnModificar);

        espacio3.setText("             ");
        panelSuperior.add(espacio3);

        btnBorrar.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnBorrar.setText("Anular Cita");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });
        panelSuperior.add(btnBorrar);

        espacio4.setText("              ");
        panelSuperior.add(espacio4);

        espacio5.setText("                  ");
        panelSuperior.add(espacio5);

        panelPrincipal.add(panelSuperior, java.awt.BorderLayout.NORTH);

        panelTabla.setOpaque(false);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Fecha", "Hora", "Servicio", "Precio", "Empleado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setResizable(false);
            tabla.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout panelTablaLayout = new javax.swing.GroupLayout(panelTabla);
        panelTabla.setLayout(panelTablaLayout);
        panelTablaLayout.setHorizontalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 979, Short.MAX_VALUE)
        );
        panelTablaLayout.setVerticalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
        );

        panelPrincipal.add(panelTabla, java.awt.BorderLayout.CENTER);

        panelInferior.setOpaque(false);
        panelInferior.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        espaciado2.setText("                                                                                                                                              ");
        panelInferior.add(espaciado2);

        btnSalir.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnSalir.setText("VOLVER A MENU PRINCIPAL");
        btnSalir.setActionCommand("");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        panelInferior.add(btnSalir);

        panelPrincipal.add(panelInferior, java.awt.BorderLayout.PAGE_END);

        espaciado3.setText("    ");
        panelPrincipal.add(espaciado3, java.awt.BorderLayout.EAST);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 1003, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        // Crear el ComboBox y cargar las filas de la tabla
        ArrayList<Cita> datosTabla = consultas.consultarCitas(id);
        comboBoxDatos = new JComboBox<>(datosTabla.toArray(new Cita[0]));
        String[] opciones = {"Servicio","Fecha","Hora"};
        comboBox=new JComboBox(opciones);
        if (datosTabla == null) {
            JOptionPane.showMessageDialog(null, "No hay ninguna cita que modificar. No existen citas");
        } else {
            int option = JOptionPane.showOptionDialog(null,comboBoxDatos,"Seleccione una cita",JOptionPane.OK_OPTION,JOptionPane.PLAIN_MESSAGE,null,null,null);
            // Realizar la acciÃ³n correspondiente segÃºn la selecciÃ³n del usuario
            if (option==JOptionPane.OK_OPTION) {
                Cita citaSeleccionada = (Cita) comboBoxDatos.getSelectedItem();
                int decisionServ = JOptionPane.showConfirmDialog(null, comboBox, "Â¿Que desea modificar?", JOptionPane.OK_OPTION);
                if (decisionServ == JOptionPane.OK_OPTION) {
                    try {
                        String eleccion=comboBox.getSelectedItem().toString();
                        switch (eleccion) {
                            case "Servicio":
                                modificarServicio(citaSeleccionada);
                                llenarTablaCliente(id);
                                break;
                            case "Fecha":
                                modificarServicioFecha(citaSeleccionada);
                                llenarTablaCliente(id);
                                break;
                            case "Hora":
                                modificarServicioHora(citaSeleccionada);
                                llenarTablaCliente(id);
                                break;
                            default:
                                JOptionPane.showMessageDialog(null, "Seleccione una opcion");
                        }
                        servicioCitado = comboBox.getSelectedItem().toString();
                        
                        nuevoServicioCitado = comboBox.getSelectedItem().toString();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Error intentando mostrar la tabla");
                    }
                    
                }
            }
            /**/
        }

    }//GEN-LAST:event_btnModificarActionPerformed

    private void modificarServicioFecha(Cita citaSeleccionada) throws HeadlessException {
        DatePicker nuevaFecha = new DatePicker();
        JOptionPane.showConfirmDialog(null, nuevaFecha,"Introduce nueva fecha",JOptionPane.OK_OPTION);
        String fechaActualizada=nuevaFecha.getDate().toString();
        int idCita=citaSeleccionada.getId();
        consultas.modificarServicioPorFecha(fechaActualizada,idCita);
    }

    private void modificarServicio(Cita citaSeleccionada) throws HeadlessException {
        try {
            ArrayList<String> listaServ=consultas.serviciosBD();
            JComboBox comboboxServ=new JComboBox(listaServ.toArray());
            JOptionPane.showConfirmDialog(null, comboboxServ,"Seleccione nuevo servicio",JOptionPane.OK_OPTION);
            String nuevoS=comboboxServ.getSelectedItem().toString();
            int idS=consultas.cogerIdServicio(nuevoS);
            String fechaS=citaSeleccionada.getFecha();
            consultas.modificarServicio(idS, fechaS);
            llenarTablaCliente(id);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error al mostrar los datos");
        }
    }

    private void btnPedirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPedirActionPerformed
        pedirDatos();
    }//GEN-LAST:event_btnPedirActionPerformed

    private void pedirDatos() throws HeadlessException {
        // TODO add your handling code here:
        // Crear un JDateChooser
        DatePicker dateChooser = new DatePicker();
        int result = JOptionPane.showConfirmDialog(null, dateChooser, "Selecciona fecha", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            fecha = dateChooser.getDate().toString();
            comprobarFecha();
        }
    }

    private void comprobarFecha() throws HeadlessException {
        try {
            conexion = realizarConexion();
            String sql = "SELECT * FROM `horario` WHERE fecha LIKE ?;";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, fecha);
            ResultSet rs = ps.executeQuery();
            if (!rs.next()) {
                JOptionPane.showMessageDialog(null, "No hay servicios disponibles para esa fecha");
            } else {
                while (true) {
                    idServ = rs.getInt("ID_SERVICIO");
                    consultaServicios();
                    listaDatos.add(datoServ);
                    if (!rs.next()) {
                        break;
                    }
                }
                comboBox = new JComboBox(listaDatos.toArray());
                int decisionServ = JOptionPane.showConfirmDialog(null, comboBox, "Seleccione servicio", JOptionPane.OK_CANCEL_OPTION);
                if (decisionServ == JOptionPane.OK_OPTION) {
                    comprobarServicio();
                    insertarCita();
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No se puede continuar con la peticiÃ³n. Error con la base de datos");
        }
    }

    private void insertarCita() throws HeadlessException, SQLException {
        String insertarCita = "INSERT INTO CITA (`ID_CLIENTE`, `ID_HORARIO`) VALUES (?,?);";
        PreparedStatement psCita = con.prepareStatement(insertarCita);
        psCita.setInt(1, id);
        String consultarHorario = "SELECT id FROM horario WHERE id_servicio = (SELECT id FROM servicios WHERE descripcion LIKE ?)  AND FECHA LIKE ?";
        PreparedStatement psHorario = con.prepareStatement(consultarHorario);
        psHorario.setString(1, descripcionServicio);
        psHorario.setString(2, fecha);
        ResultSet resulHorario = psHorario.executeQuery();
        while (resulHorario.next()) {
            idHorario = resulHorario.getInt(1);
        }
        psCita.setInt(2, idHorario);
        int insercion = psCita.executeUpdate();
        if (insercion == 0) {
            JOptionPane.showMessageDialog(null, "No se pudo realizar la cita");
        } else {
            llenarTabla();
        }
    }

    private void comprobarServicio() {
        servicioEscogido = comboBox.getSelectedItem().toString();
        String delimitador = ": ";
        int inicio = servicioEscogido.indexOf(delimitador) + delimitador.length();
        int fin = servicioEscogido.lastIndexOf(" ");
        serviciocompleto = servicioEscogido.substring(inicio, fin);
        descripcionServicio = serviciocompleto.substring(0, serviciocompleto.indexOf(" "));
        precioServicio = servicioEscogido.substring(servicioEscogido.lastIndexOf(": ") + 2, servicioEscogido.length());
    }

    private void consultaServicios() throws SQLException {
        String sqlServicio = "SELECT DESCRIPCION,PRECIO FROM SERVICIOS WHERE ID=?";
        PreparedStatement ps2 = con.prepareStatement(sqlServicio);
        ps2.setInt(1, idServ);
        ResultSet resultado = ps2.executeQuery();
        while (resultado.next()) {
            String descripcion = resultado.getString("DESCRIPCION");
            Float precio = resultado.getFloat("PRECIO");
            datoServ = "Nombre: " + descripcion + " Precio: " + precio.toString();
        }
    }

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        vc = new VentanaCliente();
        vaciarTabla();
        dispose();
        vc.setVisible(true);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        // TODO add your handling code here:
        ArrayList<Cita> datosTabla = consultas.consultarCitas(id);
        comboBoxDatos = new JComboBox<>(datosTabla.toArray(new Cita[0]));
        String[] opciones = {"Servicio","Fecha","Hora"};
        comboBox=new JComboBox(opciones);
        if (datosTabla == null) {
            JOptionPane.showMessageDialog(null, "No hay ninguna cita que borrar. No existen citas");
        } else {
            int option2 = JOptionPane.showOptionDialog(null,comboBoxDatos,"Seleccione una cita para borrar",JOptionPane.OK_OPTION,JOptionPane.PLAIN_MESSAGE,null,null,null);
            // Realizar la acciÃ³n correspondiente segÃºn la selecciÃ³n del usuario
            if (option2==JOptionPane.OK_OPTION) {
                Cita citaSeleccionada = (Cita) comboBoxDatos.getSelectedItem();
                int confirmacion=JOptionPane.showConfirmDialog(null, "Â¿EstÃ¡ seguro de que desea borrar la cita seleccionada?","Borrar cita",JOptionPane.OK_CANCEL_OPTION);
                if (confirmacion==JOptionPane.OK_OPTION) {
                    try {
                        consultas.borrarCita(citaSeleccionada);
                        llenarTablaCliente(id);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Error al mostrar las citas");
                    }
                }
            }
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionCitasCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionCitasCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionCitasCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionCitasCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionCitasCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnPedir;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel espaciado;
    private javax.swing.JLabel espaciado2;
    private javax.swing.JLabel espaciado3;
    private javax.swing.JLabel espacio1;
    private javax.swing.JLabel espacio2;
    private javax.swing.JLabel espacio3;
    private javax.swing.JLabel espacio4;
    private javax.swing.JLabel espacio5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JPanel panelTabla;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    private void modificarDiseÃ±o() {
        //Botones
        btnSalir.putClientProperty(this, "roundrect");
        btnPedir.putClientProperty(this, "roundrect");
        btnModificar.putClientProperty(this, "roundrect");
        btnBorrar.putClientProperty(this, "roundrect");
        //Tabla
        tabla.setFillsViewportHeight(true);
        tabla.setCellSelectionEnabled(false);
    }

    void llenarTabla() {
        try {
            int idC = id;
            if (idC != 0) {
                llenarTablaCliente(idC);
            } else {
                llenarTablaTodosLosClientes();
            }
        } catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(null, "Error intentando conectar a la base de datos");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No se pudo llenar la tabla");
        }
    }

    private void llenarTablaTodosLosClientes() throws SQLException {
        DefaultTableModel modeloGeneral = new DefaultTableModel(columnas, 0){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
            }
        };

        conexion = realizarConexion();
        String mostrarTodas = "SELECT horario.fecha_es as fecha, horario.hora_es as hora, servicios.descripcion, servicios.precio,CONCAT(usuario.nombre, ' ', usuario.apellidos) AS empleado\n"
                + "FROM cita JOIN horario ON cita.id_horario = horario.ID JOIN personal ON horario.id_personal = personal.id JOIN usuario ON personal.id = usuario.id JOIN servicios ON horario.id_servicio = servicios.id\n"
                + "WHERE cita.id_cliente = (id_cliente);"; // Ejecutar la consulta y agregar los resultados al modelo
        Statement statement = con.createStatement();
        ResultSet resultado = statement.executeQuery(mostrarTodas);
        while (resultado.next()) {
            String fecha = resultado.getString("fecha");
            String hora = resultado.getString("hora");
            String descripcion = resultado.getString("descripcion");
            String precio = resultado.getString("precio");
            String empleado = resultado.getString("empleado");
            String[] fila = {fecha, hora, descripcion, precio, empleado};
            modeloGeneral.addRow(fila);
        }
        tabla.setModel(modeloGeneral);
        tabla.setCellSelectionEnabled(false);
    }

    private void llenarTablaCliente(int idC) throws SQLException {

        DefaultTableModel modelo = new DefaultTableModel(columnas, 0){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
            }
            
        };

        conexion = realizarConexion();
        String mostrarCitasDeCliente = "SELECT horario.fecha_es as fecha, horario.hora_es as hora, servicios.descripcion, servicios.precio,CONCAT(usuario.nombre, ' ', usuario.apellidos) AS empleado\n"
                + "FROM cita JOIN horario ON cita.id_horario = horario.ID JOIN personal ON horario.id_personal = personal.id JOIN usuario ON personal.id = usuario.id JOIN servicios ON horario.id_servicio = servicios.id\n"
                + "WHERE cita.id_cliente = ?;"; // Ejecutar la consulta y agregar los resultados al modelo
        PreparedStatement stmt = con.prepareStatement(mostrarCitasDeCliente);
        stmt.setInt(1, idC);
        ResultSet resultado = stmt.executeQuery();
        while (resultado.next()) {
            String fecha = resultado.getString("fecha");
            String hora = resultado.getString("hora");
            String descripcion = resultado.getString("descripcion");
            String precio = resultado.getString("precio");
            String empleado = resultado.getString("empleado");
            String[] fila = {fecha, hora, descripcion, precio, empleado};
            modelo.addRow(fila);
        }
        tabla.setModel(modelo);
        tabla.setCellSelectionEnabled(false);
    }

    private ConexionBD realizarConexion() {
        ConexionBD conexion = new ConexionBD("admin", "123pelu");
        con = conexion.getConnection();
        return conexion;
    }

    void setValor(int id) {
        this.id = id;
    }

    private void vaciarTabla() {
        tabla.setModel(new DefaultTableModel(0, 0));
        vc.setId(id);
    }

    private void modificarServicioHora(Cita citaSeleccionada) {
        TimePicker nuevaFecha = new TimePicker();
        JOptionPane.showConfirmDialog(null, nuevaFecha,"Introduce nueva hora",JOptionPane.OK_OPTION);
        String horaActualizada=nuevaFecha.getTime().toString();
        int idCita=citaSeleccionada.getId();
        consultas.modificarServicioPorHora(horaActualizada,idCita);
    }

}
